		       ━━━━━━━━━━━━━━━━━━━━━━━━━━
			SCANNING SYSTEM PROPOSAL

			    Adam Washington
		       ━━━━━━━━━━━━━━━━━━━━━━━━━━


Table of Contents
─────────────────

1 Introduction
2 Design Goals
.. 2.1 User simplicity
.. 2.2 Composability
.. 2.3 Functionality
3 Examples
.. 3.1 Plot Motor Scan
.. 3.2 Perform Fits
.. 3.3 Perform Measurement Scan
.. 3.4 Perform complex scans
4 Class setup
5 High Level interface
.. 5.1 pv
.. 5.2 Position Commands
6 Pseudoinstrument





1 Introduction
══════════════

  This is a proposal for an improved system for running scans on the
  instrument.  The idea is to use `Scan' objects to represent the parts
  of the scan.  These scan objects form an algebra, making them easier
  to compose than using `for' loops.  These scan objects are mainly
  intended as tools for the instrument scientists for creating a higher
  level interface that the users will interact with.


2 Design Goals
══════════════

  We desire the following traits in the Scanning system


2.1 User simplicity
───────────────────

  The users need to be able to perform simple scans without thinking
  about object orient programming or algebraic data types.  Performing a
  basic scan should always be a one liner.  Making modified versions of
  that scan should require learning a modification of that command and
  not an entirely new structure.  Common, sensible user options should
  be available and sane defaults given.

  The code should also take advantage of Python's built in documentation
  system to allow for discoverability of all of the functionality of
  these scripts.


2.2 Composability
─────────────────

  The code should trivially allow combining smaller scripts into a
  larger script.  This ensures that, as long as the smaller scripts are
  bug free, the larger scripts will also be free of bugs by
  construction.


2.3 Functionality
─────────────────

  The code should be able to perform all of the tasks that might involve
  scanning on the beamline, from the common place to the irregular.

  Plotting: It should be possible to plot any readback value as a function
            of any set of motor positions.  Scans of multiple axes should
            be able to either plot multiple labelled lines or a 2D heatmap
  Measuring: Performing a full series of measurements should only be a
             minor modification of the plotting command
  Fitting: The user should be capable of performing fits on curves to
           extract values of interest.  Common fitting routines should be
           a simple string while still accepting custom functions for
           exceptional circumstances
  Spacing: It should be possible to space points both linearly and
           logarithmically.
  Prediction: It should be possible to estimate the time needed for a scan
              before the scan is performed.


3 Examples
══════════

  These are examples of some basic scans that the user might perform on
  the high level interface.  The examples have run on a 6 defined in a
  later section.


3.1 Plot Motor Scan
───────────────────

  Our first, simple example is the user plotting a scan of the detector
  intensity as the motor moves from 0 to 2 inclusively in steps /near/
  0.3.

  >>> from Scans.Instrument import scan, theta, two_theta
  >>> scan(theta, begin=0, end=2, stride=0.6).plot(save="plot_example.png")
  Taking a count at theta=0.00 and two theta=0.00
  Taking a count at theta=0.50 and two theta=0.00
  Taking a count at theta=1.00 and two theta=0.00
  Taking a count at theta=1.50 and two theta=0.00
  Taking a count at theta=2.00 and two theta=0.00

  The `save' argument allows the figure to be saved to a file.
  Otherwise, the screen will show the plot interactively.

  [file:plot_example.png]

  The `stride' option gives an appoximate step size, but forces ensures
  that the beginning and final points are measured.  `step' forces the
  exact spacing, but may not measure the final point.  `count' and
  `gaps' allow the user to specify the number of measurements and the
  number of gaps, respectively.

  >>> scan(theta, begin=0, end=2, step=0.6).plot(save="temp.png")
  Taking a count at theta=0.00 and two theta=0.00
  Taking a count at theta=0.60 and two theta=0.00
  Taking a count at theta=1.20 and two theta=0.00
  Taking a count at theta=1.80 and two theta=0.00
  >>> scan(theta, begin=0, end=2, count=4).plot(save="temp.png")
  Taking a count at theta=0.00 and two theta=0.00
  Taking a count at theta=0.67 and two theta=0.00
  Taking a count at theta=1.33 and two theta=0.00
  Taking a count at theta=2.00 and two theta=0.00
  >>> scan(theta, begin=0, end=2, gaps=4).plot(save="temp.png")
  Taking a count at theta=0.00 and two theta=0.00
  Taking a count at theta=0.50 and two theta=0.00
  Taking a count at theta=1.00 and two theta=0.00
  Taking a count at theta=1.50 and two theta=0.00
  Taking a count at theta=2.00 and two theta=0.00

  The user also has the option of fixing the steps size and number of
  measurements or gaps while leaving the ending position open.

  >>> scan(theta, begin=0, step=0.6, count=5).plot(save="temp.png")
  Taking a count at theta=0.00 and two theta=0.00
  Taking a count at theta=0.60 and two theta=0.00
  Taking a count at theta=1.20 and two theta=0.00
  Taking a count at theta=1.80 and two theta=0.00
  Taking a count at theta=2.40 and two theta=0.00
  >>> scan(theta, begin=0, stride=0.6, gaps=5).plot(save="temp.png")
  Taking a count at theta=0.00 and two theta=0.00
  Taking a count at theta=0.60 and two theta=0.00
  Taking a count at theta=1.20 and two theta=0.00
  Taking a count at theta=1.80 and two theta=0.00
  Taking a count at theta=2.40 and two theta=0.00
  Taking a count at theta=3.00 and two theta=0.00


3.2 Perform Fits
────────────────

  Performing a fit on a measurement is merely a modification of
  performing the plot

  >>> fit = scan(theta, begin=0, end=2, stride=0.6).fit(fit="linear", save="fitplot.png")
  Taking a count at theta=0.00 and two theta=0.00
  Taking a count at theta=0.50 and two theta=0.00
  Taking a count at theta=1.00 and two theta=0.00
  Taking a count at theta=1.50 and two theta=0.00
  Taking a count at theta=2.00 and two theta=0.00
  >>> fit["slope"]
  0.66921304299024642

  In this instance, the user requested a linear fit.  The result was an
  array with the slope and intercept.  The fit is also plotted over the
  original graph when finished.

  [file:fitplot.png]

  We can also plot the same scan against a gaussian

  >>> fit = scan(theta, begin=0, end=2, stride=0.6).fit(fit="gaussian")
  Taking a count at theta=0.00 and two theta=0.00
  Taking a count at theta=0.50 and two theta=0.00
  Taking a count at theta=1.00 and two theta=0.00
  Taking a count at theta=1.50 and two theta=0.00
  Taking a count at theta=2.00 and two theta=0.00
  >>> fit["center"]
  2.0612514476281349

3.3 Perform Measurement Scan
────────────────────────────

  To go from a simple counting scan to a full set of measurements, all
  that needs to change is the method call.

  >>> title = "Taking a measurement at theta={theta}"
  >>> scan(theta, begin=0, end=2, stride=0.6).measure(title)
  Taking a measurement at theta=0.0
  Taking a measurement at theta=0.5
  Taking a measurement at theta=1.0
  Taking a measurement at theta=1.5
  Taking a measurement at theta=2.0
  >>> scan(two_theta, begin=0, end=2, stride=0.6).measure("two theta={two_theta}")
  two theta=0.0
  two theta=0.5
  two theta=1.0
  two theta=1.5
  two theta=2.0


3.4 Perform complex scans
─────────────────────────

  Some uses need more complicated measurements that just a simple scan
  over a single axis.  These more complicated commands may need some
  initial coaching from the beamline scientist, but should be simple
  enough for the user to modify them without assistance.

  To begin with, a user may want to scan theta and two theta together in
  lock step.

  >>> th= scan(theta, begin=0, end=1, stride=0.3)
  >>> two_th= scan(two_theta, begin=0, end=2, stride=0.6)
  >>> (th& two_th).measure("theta={theta} and two_theta={two_theta}")
  theta=0.0 and two_theta=0.0
  theta=0.25 and two_theta=0.5
  theta=0.5 and two_theta=1.0
  theta=0.75 and two_theta=1.5
  theta=1.0 and two_theta=2.0

  On the other hand, if the user is unsure about the proper sample
  alignment, they may want to investigate theta and two-theta separately

  >>> th = scan(theta, begin=0, end=1, stride=0.5)
  >>> two_th = scan(two_theta, begin=0, end=3, stride=1.0)
  >>> (th * two_th).measure("theta={theta} and two_theta={two_theta}")
  theta=0.0 and two_theta=0.0
  theta=0.0 and two_theta=1.0
  theta=0.0 and two_theta=2.0
  theta=0.0 and two_theta=3.0
  theta=0.5 and two_theta=0.0
  theta=0.5 and two_theta=1.0
  theta=0.5 and two_theta=2.0
  theta=0.5 and two_theta=3.0
  theta=1.0 and two_theta=0.0
  theta=1.0 and two_theta=1.0
  theta=1.0 and two_theta=2.0
  theta=1.0 and two_theta=3.0

3.5 Estimate time
─────────────────────────

  It's not all that uncommon for users to find themselves setting an
  overnight run to perform while they sleep.  Since they are usually
  writing these scripts around two in the morning, their arithemtic
  skills frequently fail.  When the run terminates prematurely, the
  beam time is wasted.  When the user underestimates the time that
  they're requesting, they wake up to find that their measurements
  haven't finished and they must use more beam time to finish their
  results.

  Having the scan system perform estimates of the time required and
  the point of completion is a simple convenience to prevent these
  user headaches.

  >>> needed = scan(theta, begin=0, end=2.0, step=0.6).calculate(hours=1, minutes=30)
  >>> print(needed)
  21600

  >>> needed = scan(theta, begin=0, end=2.0, step=0.6).calculate(frames=1000, time=True) #doctest: +SKIP
  The run would finish at 2017-07-17 20:06:24.600802
  >>> print(needed) #doctest: +SKIP
  400.0

4 Class setup
═════════════

  [file:classes.pdf]

  The base class for the low level code is the `Scan' class.  This
  ensures that any functionality added to this class or bugs fixed in
  its code propagate out to all callers of this library.  Unfortunately,
  Python does not have a concept of interfaces, so we cannot force all
  children to have a set of defined functions.  However, any subclasses
  of `Scan' must contain the follow member functions:

  map: Create a modified version of the scan based on a user supplied
       function.  The original position of each point is fed as input to
       the function and the return value of the function is the new
       position.
  reverse: Create a copy of the scan that runs in the opposite direction
  __len__: Return the number of elements in the scan
  __iter__: Return an iterator that steps through the scan one position at
            a time, yielding the current position at each point.

  There are four default subclasses of Scan that should handle most of
  the requirements

  SimpleScan: is the lowest level of the scan system.  It requires a
              function which performs the desired action on each point, a
              list of points, and a name for the axis.  At this time, all
              scans are combinations of simpleScans.

  SumScan: runs two scans sequentially.  These scans do not need to be on
           the same axes or even move the same number of axes.

  ProductScan: performs every possible combination of positions for two
               different scans.  This provides an alternative to nested
               loops.

  ParallelScan: takes to scans and runs their actions together at each
                step.  For example, if `a' was a scan over theta and `b'
                was a scan over two theta, then `a && b' would scan each
                theta angle with its corresponding two theta.

  The base `Scan' class contains four useful member functions.

  plot: The `plot' function goes to each position listed in the scan,
        takes a count, and plots it on an axis.  The user can specify the
        counting command.
  measure: The `measure' function goes to each position in the in the scan
           and records a measurement.  The function is passed a title
           which can include information about the current position in the
           scan.
  fit: Like `plot', this function takes a single count at each position.
       It then fits it to the user supplied model and returns the fitted
       value.  This could be anything from the peak position to the
       frequency of the curve.
  calculate: This function takes a desired measurement time at each point
             and, optionally, an approximated motor movement time.  It
             returns an estimated duration for the scan and time of
             completion.


5 High Level interface
══════════════════════

  I've included an example of a possible high level interface in the
  `scan' function.  It takes a motor name followed by a plethora of
  keyword arguments to easily create scans for the users.


5.1 pv
──────

  The first parameter for scan is the name of the motor the be scanned.
  This string is passed onto cset for the actual motor movements.  It's
  also used as the label for the scan when doing string interpolation
  for the run titles.


5.2 Position Commands
─────────────────────

  The user needs to give three of the following keyword arguments to
  create a scan.

  begin: This is the start position of the scan.  This is currently
         mandatory, but we might make it optional in the future for
         creating relative scans.
  end: This is the final position of the scan.  The type of step chosen
       determines whether or not this final value is guaranteed to be
       included in the final measurement.
  count: The total number of measurements to perform.  This parameter
         always take precedence over "gaps"
  gaps: The number steps to take.  The total number of measurements is
        always one greater than the number of gaps.
  stride: A /requested/, but not /mandatory/, step size.  Users often know
          the range over which they wish to scan and their desired
          scanning resolution.  `stride' measured the entire range, but
          may increase the resolution to give equally spaced measurements.
          `stride' always take precedence over =step
  step: A mandatory step size.  If the request measurement range is not an
        integer number of steps, the measurement will stop before the
        requested end.
